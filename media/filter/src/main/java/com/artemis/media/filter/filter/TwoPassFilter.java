package com.artemis.media.filter.filter;import android.opengl.GLES30;import com.artemis.media.filter.GLFrameBuffer;/** * An extension of BasicFilter. This class allows for a filter program to be applied twice to a given input. * The same fragment and vertex shaders will be used for both of the passes. Also the same values will be passed * for both passes unless specifically changed.  To check which pass is currently being run during passShaderValues(), * getCurrentPass() can be called.  The current pass will either be 1 or 2. * * @author Chris Batt */public abstract class TwoPassFilter extends BasicFilter {    private GLFrameBuffer firstPassFrameBuffer;    private int currentPass;    /* (non-Javadoc)     * @see project.android.imageprocessing.input.GLTextureOutputRenderer#destroy()     */    @Override    public void destroy() {        super.destroy();        if (firstPassFrameBuffer != null) {            firstPassFrameBuffer.destoryBuffer();            firstPassFrameBuffer = null;        }    }    @Override    protected void drawFrame() {        currentPass = 1;        if (firstPassFrameBuffer == null || glFrameBuffer.getFrameBuffer() == null) {            if (getWidth() != 0 && getHeight() != 0) {                initFBO();            } else {                return;            }        }        GLES30.glBindFramebuffer(GLES30.GL_FRAMEBUFFER, firstPassFrameBuffer.getFrameBuffer()[0]);        if (texture_in == 0) {            return;        }        GLES30.glViewport(0, 0, getWidth(), getHeight());        GLES30.glUseProgram(programHandle);        GLES30.glClear(GLES30.GL_DEPTH_BUFFER_BIT | GLES30.GL_COLOR_BUFFER_BIT);        GLES30.glClearColor(getBackgroundRed(), getBackgroundGreen(), getBackgroundBlue(), getBackgroundAlpha());        passShaderValues();        GLES30.glDrawArrays(GLES30.GL_TRIANGLE_STRIP, 0, 4);        texture_in = firstPassFrameBuffer.getTexture_out()[0];        GLES30.glBindFramebuffer(GLES30.GL_FRAMEBUFFER, 0);        currentPass = 2;        super.drawFrame();    }    protected int getCurrentPass() {        return currentPass;    }    protected void initFBO() {        super.initFBO();        if (firstPassFrameBuffer != null) {            firstPassFrameBuffer.destoryBuffer();            firstPassFrameBuffer = null;        }        firstPassFrameBuffer = new GLFrameBuffer(getWidth(), getHeight());        firstPassFrameBuffer.activityFrameBuffer(getWidth(), getHeight());        int status = GLES30.glCheckFramebufferStatus(GLES30.GL_FRAMEBUFFER);        if (status != GLES30.GL_FRAMEBUFFER_COMPLETE) {            throw new RuntimeException(this + ": Failed to set up render buffer with status " + status + " and error " + GLES30.glGetError());        }    }}